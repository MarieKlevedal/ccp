Tips
----
¤ Lec notes 4 har bra tips och kodexempel

Kom ihåg
--------
¤ Lazy && and ||

TODO
----
¤ Skriv kommentarer i alla nya filer.

¤ Skriv om EAnd och EOr?
¤ Skriv om alpharen med statemonad?
¤ ENot kan modelleras genom att returnera e == false (med icmp). Gör en ny 
  instruction (BCmp) så slipper vi mod:a hårdkodandet i ICmp. Gör det?
¤ Ha med runtime.bc (obs: den kompillerade filen) i tar-bollen. Inte runtime.ll?

Frågor
------
¤ Hur sparar vi namnet på testfilen i jlc? Vi behöver det sedan för att 
  kompillera llvm-filen, länka dem osv.
  
¤ Ska .bc, main.bc, main.o och a.out hamna i samma mapp som testfilerna
  (/graderTestSuite/good)? Hur säger vi till gcc att lägga a.out där isf?
  
¤ Vi får en konstig #test.ll#-fil med nuvarande jlc.
  
  
¤ Behöver vi ha med \0A i de globala strängarna? Vad är den till för? llvm-as
  klagar om vi har med den och har längd +2
  
¤ Testfilen core026: Är den verkligen ok? Den avslutas ju inte med en return.
  Är det för att den har en while-true (och det inte finns ngt break i språket)
  och den aldrig kommer lämna loopen som vi inte bryr oss om det?
  
¤ Är det ok att använda LLVMs funktioner and, or och xor (är de lazy?)
  eller får vi bara använda de funktioner som finns på listan från lec3?
        Basic JavaLette will only need the following instructions:
            • Terminator instructions: ret and br
            • Arithmetic operations:
                • For integers add, sub, mul, sdiv and srem
                • For doubles fadd, fsub, fmul and fdiv
            • Memory access: alloca, load, getelementptr and store
            • Other: icmp, fcmp and call
        Some of the extensions will need more instructions.
  
