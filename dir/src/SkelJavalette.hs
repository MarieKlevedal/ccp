module SkelJavalette where

-- Haskell module generated by the BNF converter

import AbsJavalette
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  PProg defs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  FnDef type' id args block  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  DArg type' id  -> failure x


transBlock :: Block -> Result
transBlock x = case x of
  DBlock stms  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SEmpty  -> failure x
  SBlock block  -> failure x
  SDecl type' items  -> failure x
  SAss id exp  -> failure x
  SIncr id  -> failure x
  SDecr id  -> failure x
  SRet exp  -> failure x
  SVRet  -> failure x
  SIf exp stm  -> failure x
  SIfElse exp stm1 stm2  -> failure x
  SWhile exp stm  -> failure x
  SExp exp  -> failure x


transItem :: Item -> Result
transItem x = case x of
  IDecl id  -> failure x
  IInit id exp  -> failure x


transType :: Type -> Result
transType x = case x of
  TInt  -> failure x
  TDoub  -> failure x
  TBool  -> failure x
  TVoid  -> failure x
  TStr  -> failure x
  TFun type' types  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EVar id  -> failure x
  ELit lit  -> failure x
  EApp id exps  -> failure x
  ENeg exp  -> failure x
  ENot exp  -> failure x
  EMul exp1 mulop2 exp3  -> failure x
  EAdd exp1 addop2 exp3  -> failure x
  ERel exp1 relop2 exp3  -> failure x
  EAnd exp1 exp2  -> failure x
  EOr exp1 exp2  -> failure x
  EType type' exp  -> failure x


transLit :: Lit -> Result
transLit x = case x of
  LInt n  -> failure x
  LDoub d  -> failure x
  LTrue  -> failure x
  LFalse  -> failure x
  LStr str  -> failure x


transAddOp :: AddOp -> Result
transAddOp x = case x of
  Plus  -> failure x
  Minus  -> failure x


transMulOp :: MulOp -> Result
transMulOp x = case x of
  Times  -> failure x
  Div  -> failure x
  Mod  -> failure x


transRelOp :: RelOp -> Result
transRelOp x = case x of
  Lt  -> failure x
  LtEq  -> failure x
  Gt  -> failure x
  GtEq  -> failure x
  Eq  -> failure x
  NEq  -> failure x



