

module AbsJavalette where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Program =
   PProg [Def]
  deriving (Eq,Ord,Show,Read)

data Def =
   FnDef Type Ident [Arg] Block
  deriving (Eq,Ord,Show,Read)

data Arg =
   DArg Type Ident
  deriving (Eq,Ord,Show,Read)

data Block =
   DBlock [Stm]
  deriving (Eq,Ord,Show,Read)

data Stm =
   SEmpty
 | SBlock Block
 | SDecl Type [Item]
 | SAss Ident Exp
 | SIncr Ident
 | SDecr Ident
 | SRet Exp
 | SVRet
 | SIf Exp Stm
 | SIfElse Exp Stm Stm
 | SWhile Exp Stm
 | SExp Exp
  deriving (Eq,Ord,Show,Read)

data Item =
   IDecl Ident
 | IInit Ident Exp
  deriving (Eq,Ord,Show,Read)

data Type =
   TInt
 | TDoub
 | TBool
 | TVoid
 | TStr
 | TFun Type [Type]
  deriving (Eq,Ord,Show,Read)

data Exp =
   EVar Ident
 | ELit Lit
 | EApp Ident [Exp]
 | ENeg Exp
 | ENot Exp
 | EMul Exp MulOp Exp
 | EAdd Exp AddOp Exp
 | ERel Exp RelOp Exp
 | EAnd Exp Exp
 | EOr Exp Exp
 | EType Type Exp
  deriving (Eq,Ord,Show,Read)

data Lit =
   LInt Integer
 | LDoub Double
 | LTrue
 | LFalse
 | LStr String
  deriving (Eq,Ord,Show,Read)

data AddOp =
   Plus
 | Minus
  deriving (Eq,Ord,Show,Read)

data MulOp =
   Times
 | Div
 | Mod
  deriving (Eq,Ord,Show,Read)

data RelOp =
   Lt
 | LtEq
 | Gt
 | GtEq
 | Eq
 | NEq
  deriving (Eq,Ord,Show,Read)

